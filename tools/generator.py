import argparse
import os

from pathlib import Path
from typing import TextIO

import yaml

from common.util import get_file_key, to_camel_case


def mkdir(path):
    if not os.path.exists(path):
        os.mkdir(path)


def write_line(file: TextIO, line, ident=0):
    idents = "\t" * ident
    file.write(f"{idents}{line}\n")


def format_file(file):
    os.popen(f"black -l 80 {file}")


def generate_ui_elements(path_list, config_list, output_dir):
    output_dir = Path(output_dir) / "ui"
    mkdir(output_dir)

    target_file = output_dir / "ui_elements.py"
    target = target_file.open("w")

    write_line(
        target,
        "# This file is generated by generator.py, do not change this file.",
    )
    write_line(
        target, f"# Change UI elements file(*png) in {path_list} instead."
    )

    res_map = {}
    for path in path_list:
        res_dir = Path(path)
        category = res_dir.name
        if category not in res_map:
            res_map[category] = set()

        elements = res_map[category]
        for each in res_dir.glob("*png"):
            elements.add(get_file_key(each.name))

    for config in config_list:
        if "ui" not in config:
            continue

        for category in config["ui"]:
            if category == "base_dir":
                continue

            if category not in res_map:
                res_map[category] = set()

            elements = res_map[category]
            for element in config["ui"][category]:
                elements.add(element)

    if len(res_map) == 0:
        return

    for category, elements in res_map.items():
        if len(elements) == 0:
            continue

        write_line(target, f"class {to_camel_case(category)}(object):")
        elements = sorted(elements)
        for element in elements:
            write_line(target, f'{to_camel_case(element)} = "{category}.{element}"', ident=1)

    format_file(target_file)


def generate_character(config_file, output_dir):
    with open(config_file, "r") as f:
        config = yaml.load(f, Loader=yaml.Loader)
        if "character" not in config:
            print(f'"character" not found in {config_file}')
            return

        output_dir = Path(output_dir) / "character"
        mkdir(output_dir)

        # character_class.py
        target_file = output_dir / f"character_class.py"
        target = target_file.open("w")
        write_line(
            target,
            "# This file is generated by generator.py, do not change this file.",
        )
        write_line(target, f"# Change {config_file} instead.")
        write_line(target, "class CharacterClass(object):")
        write_line(target, 'Unknown = "unknown"', ident=1)
        for character_class in config["character"].keys():
            write_line(
                target,
                f'{to_camel_case(character_class)} = "{character_class}"',
                ident=1,
            )

        format_file(target_file)

        # each_character_class.py
        for character_class in config["character"].keys():
            camel_character_class = to_camel_case(character_class)
            character_skill = config["character"][character_class]["skill"]
            target_file = Path(output_dir) / f"{character_class}.py"
            target = target_file.open("w")

            write_line(
                target,
                "# This file is generated by generator.py, do not change this file.",
            )
            write_line(
                target,
                f"# Change {character_class} config in {config_file} instead.",
            )
            write_line(target, f"from character.character import Character")
            write_line(
                target,
                f"from runtime.character.character_class import CharacterClass",
            )
            write_line(target, f"class {camel_character_class}(Character):")

            for skill in character_skill.keys():
                write_line(
                    target, f'{to_camel_case(skill)} = "{skill}"', ident=1
                )

            write_line(
                target, f"def __init__(self, device, ui_ctx):", ident=1
            )
            write_line(
                target,
                f"super().__init__(device, ui_ctx, CharacterClass.{camel_character_class})",
                ident=2,
            )

            for skill in character_skill.keys():
                write_line(
                    target,
                    f"self.{skill} = self.register_skill({camel_character_class}.{to_camel_case(skill)}, {character_skill[skill]})",
                    ident=2,
                )

            format_file(target_file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--res-dir",
        dest="resource_dir",
        help="resource file directory",
        nargs="+",
    )
    parser.add_argument(
        "--output", dest="output_dir", type=str, help="output file directory"
    )
    parser.add_argument("--conf", dest="conf", type=str, help="config file")
    parser.add_argument("--app-conf", dest="app_conf", help="APP config file", nargs="+")

    args = parser.parse_args()

    mkdir(args.output_dir)

    config_list = []
    with open(args.conf) as f:
        config_list.append(yaml.load(f, Loader=yaml.Loader))

    for conf in args.app_conf:
        with open(conf, "r") as f:
            config_list.append(yaml.load(f, Loader=yaml.Loader))

    generate_ui_elements(args.resource_dir, config_list, args.output_dir)
    generate_character(args.conf, args.output_dir)
